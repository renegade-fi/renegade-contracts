// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/console.sol";
import "forge-std/Vm.sol";
import "foundry-huff/HuffDeployer.sol";
import "permit2/interfaces/IPermit2.sol";
import "permit2-test/utils/DeployPermit2.sol";

import "renegade/Darkpool.sol";
import "renegade/Verifier.sol";
import "renegade/VKeys.sol";
import "renegade-lib/interfaces/IHasher.sol";
import "renegade-lib/interfaces/IVerifier.sol";
import "renegade-lib/interfaces/IWETH9.sol";
import "renegade-lib/darkpool/types/Ciphertext.sol";
import "./JsonUtils.sol";

library DeployUtils {
    /// @dev Path to the deployments JSON file
    string constant DEPLOYMENTS_PATH = "deployments.json";

    /// @dev Deploy the Poseidon2 hasher contract
    /// @param vm The VM to run the commands with
    function deployHasher(Vm vm) internal returns (address) {
        // Get the bytecode using huffc
        string[] memory inputs = new string[](3);
        inputs[0] = "huffc";
        inputs[1] = "-b";
        inputs[2] = "src/libraries/poseidon2/poseidonHasher.huff";
        bytes memory bytecode = vm.ffi(inputs);

        // Deploy the contract
        address deployedAddress;
        assembly {
            deployedAddress :=
                create(
                    0, // value
                    add(bytecode, 0x20), // bytecode start
                    mload(bytecode) // bytecode length
                )
        }

        require(deployedAddress != address(0), "Hasher deployment failed");
        return deployedAddress;
    }

    /// @notice Deploy core contracts
    function deployCore(
        IPermit2 permit2,
        IWETH9 weth,
        address protocolFeeAddr,
        Vm vm
    )
        internal
        returns (address darkpoolAddr)
    {
        // Deploy Hasher
        IHasher hasher = IHasher(deployHasher(vm));
        console.log("Hasher deployed at:", address(hasher));

        // Deploy VKeys and Verifier
        VKeys vkeys = new VKeys();
        IVerifier verifier = new Verifier(vkeys);
        console.log("VKeys deployed at:", address(vkeys));
        console.log("Verifier deployed at:", address(verifier));

        // Set up protocol fee parameters
        EncryptionKey memory protocolFeeKey = EncryptionKey({
            point: BabyJubJubPoint({ x: BN254.ScalarField.wrap(uint256(0)), y: BN254.ScalarField.wrap(uint256(0)) })
        });

        // Deploy Darkpool with all required parameters
        // TODO: Allow these parameters to be configured
        Darkpool darkpool = new Darkpool(
            0.003e18, // 0.3% protocol fee
            protocolFeeAddr,
            protocolFeeKey,
            weth,
            hasher,
            verifier,
            permit2
        );
        console.log("Darkpool deployed at:", address(darkpool));
        return address(darkpool);
    }

    /// @dev Deploy a permit2 contract
    /// @dev We directly deploy the bytecode here to avoid inheriting the restrictive solidity verisons
    /// @dev imposed by the Permit2 libraries.
    function deployPermit2() internal returns (address) {
        bytes memory bytecode =
            hex"60c0346100bb574660a052602081017f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a60408301524660608301523060808301526080825260a082019180831060018060401b038411176100a55782604052519020608052611b8290816100c1823960805181611540015260a0518161151a0152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630d58b1db14610e9f578063137c29fe14610d1c5780632a2d80d114610abd5780632b67b5701461094757806330f28b7a146108845780633644e5151461086157806336c78516146108175780633ff9dcb1146107b55780634fe02b441461077657806365d9723c1461066657806387517c4514610584578063927da105146104f8578063cc53287f14610417578063edd9444b146102eb5763fe8ec1a7146100c657600080fd5b346102e75760c03660031901126102e7576001600160401b0383358181116102e3576100f59036908601611185565b6024358281116102df5761010c9036908701611155565b610114611069565b916084358581116102db5761012c9036908a016110fe565b98909560a4359081116102d757610145913691016110fe565b96909581519061015482610fcb565b606b82527f5065726d697442617463685769746e6573735472616e7366657246726f6d285460208301527f6f6b656e5065726d697373696f6e735b5d207065726d69747465642c61646472838301527f657373207370656e6465722c75696e74323536206e6f6e63652c75696e74323560608301526a0d88191958591b1a5b994b60aa1b608083015282519a8b91816101f1602085018096611863565b918237018a8152039961020c601f199b8c8101835282611001565b5190209085515161021c816117df565b908a5b8181106102aa5750506102a7999a61029e91835161025181610245602082018095611836565b03848101835282611001565b519020602089810151858b015195519182019687526040820192909252336060820152608081019190915260a081019390935260643560c08401528260e081015b03908101835282611001565b51902093611696565b80f35b806102c26102bc6102d2938c5161127e565b51611915565b6102cc828661127e565b52611811565b61021f565b8880fd5b8780fd5b8480fd5b8380fd5b5080fd5b5091346102e75760803660031901126102e7576001600160401b039080358281116102e35761031d9036908301611185565b6024358381116102df576103349036908401611155565b93909261033f611069565b9160643590811161041357610356913691016110fe565b94909383515197610366896117df565b98885b8181106103f15750506102a7979881516103998161038b602082018095611836565b03601f198101835282611001565b5190206020860151828701519083519260208401947ffcf35f5ac6a2c28868dc44c302166470266239195f02b0ee408334829333b7668652840152336060840152608083015260a082015260a0815261029e81610fe6565b808b6102cc826104086102bc61040e968d5161127e565b9261127e565b610369565b8680fd5b5082346104f457602090816003193601126102e3578035906001600160401b0382116102df5761044991369101611155565b929091845b848110610459578580f35b8061046f61046a60019388886113e8565b6113f8565b6104848461047e848a8a6113e8565b016113f8565b33895283855285892091848060a01b0380911692838b528652868a20911690818a5285528589206bffffffffffffffffffffffff60a01b81541690558551918252848201527f89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4853392a20161044e565b8280fd5b50346102e75760603660031901126102e7576105808161051661103d565b9361051f611053565b610527611069565b6001600160a01b03968716835260016020908152848420928816845291825283832090871683528152919020549251938316845260a083901c65ffffffffffff169084015260d09190911c604083015281906060820190565b0390f35b50346102e75760803660031901126102e75761059e61103d565b906105a7611053565b916105b0611069565b906064359265ffffffffffff93848116908181036102db577fda9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b9333895260016020528389209660018060a01b0380921697888b5260205281858b20991698898b52602052848a2092841560001461065e57504216905b82546001600160d01b03191660a09290921b65ffffffffffff60a01b169190911795169485179055815193845260208401523392a480f35b905090610626565b5082346104f45760603660031901126104f45761068161103d565b9061068a611053565b9265ffffffffffff60443581811693908481036102db57338852602091600183528489209660018060a01b0380911697888b528452858a20981697888a5283528489205460d01c93848711156107675761ffff90858403161161075957503380895260018352848920878a528352848920888a52835284892080546001600160d01b031660d09390931b6001600160d01b03191692909217909155835194855290840191909152917f55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f39190a480f35b8451631269ad1360e11b8152fd5b508451633ab3447f60e11b8152fd5b50346102e757806003193601126102e75760209181906001600160a01b0361079c61103d565b1681528084528181206024358252845220549051908152f35b5082346104f457816003193601126104f4577f3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d90359160243533855284602052818520848652602052818520818154179055815193845260208401523392a280f35b823461085e57608036600319011261085e5761083161103d565b610839611053565b610841611069565b606435916001600160a01b03831683036102df576102a7936112a8565b80fd5b50346102e757816003193601126102e75760209061087d611517565b9051908152f35b508290346104f4576101003660031901126104f4576108a236611093565b90806083193601126102e3576108b6611022565b9160e4356001600160401b038111610943576102a7946108d8913691016110fe565b9390926108e58351611915565b6020840151828501519083519260208401947f939c21a48a8dbe3a9a2404a1d46691e4d39f6583d6ec6b35714604c986d801068652840152336060840152608083015260a082015260a0815261093a81610fe6565b51902091611603565b8580fd5b5091346102e7576101003660031901126102e75761096361103d565b366023190160c081126102e357608085519161097e83610fb0565b126102e35784519061098f82610f7f565b6001600160a01b03916024358381168103610413578152604435838116810361041357602082015265ffffffffffff60643581811681036102db57888301526084359081168103610413576060820152815260a435938285168503610943576020820194855260c4359087830182815260e4356001600160401b0381116102d757610a1d90369084016110fe565b929093804211610aa7575050918591610a976102a7999a610a9d95610a42885161188e565b90898c511690519083519260208401947ff3841cd1ff0085026a6327b620b67997ce40f282c88a8e905a7a5626e310f3d086528401526060830152608082015260808152610a8f81610fcb565b5190206115d2565b9161197a565b519251169161140c565b8a5163cd21db4f60e01b81529182015260249150fd5b5091346102e75760606003199381853601126102e357610adb61103d565b926024908135926001600160401b03978885116102db57859085360301126104135780519785890189811082821117610d0a578252848301358181116102d757850190366023830112156102d7578382013591610b378361112b565b90610b4485519283611001565b838252602093878584019160071b83010191368311610d06578801905b828210610ca9575050508a526044610b7a86880161107f565b96838c01978852013594838b0191868352604435908111610ca557610ba290369087016110fe565b959096804211610c93575050508998995151610bbd816117df565b908b5b818110610c7057505092889492610a9792610c3d97958351610be98161038b8682018095611836565b5190209060018060a01b039a8b8b51169151928551948501957faf1b0d30d2cab0380e68f0689007e3254993c596f2fdd0aaa7f4d04f794408638752850152830152608082015260808152610a8f81610fcb565b51169082515192845b848110610c51578580f35b80610c6a8585610c64600195875161127e565b5161140c565b01610c46565b806102c2610c858e9f9e93610c8b945161127e565b5161188e565b9b9a9b610bc0565b855163cd21db4f60e01b815291820152fd5b8a80fd5b608082360312610d0657856080918851610cc281610f7f565b610ccb8561107f565b8152610cd883860161107f565b83820152610ce78a8601611142565b8a8201528d610cf7818701611142565b90820152815201910190610b61565b8c80fd5b634e487b7160e01b8952604184528489fd5b5082346104f4576101403660031901126104f457610d3936611093565b91806083193601126102e357610d4d611022565b6001600160401b0393906101043585811161041357610d6f90369086016110fe565b9093610124359687116102db57610d8f61093a966102a7983691016110fe565b969095825190610d9e82610fcb565b606482527f5065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5060208301527f65726d697373696f6e73207065726d69747465642c6164647265737320737065848301527f6e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c6060830152631a5b994b60e21b6080830152835194859181610e34602085018096611863565b918237018b81520393610e4f601f1995868101835282611001565b51902092610e5d8651611915565b6020878101518589015195519182019687526040820192909252336060820152608081019190915260a081019390935260e43560c08401528260e08101610292565b5082346104f4576020806003193601126102e35781356001600160401b03928382116109435736602383011215610943578101359283116102df576024906007368386831b8401011161041357865b858110610ef9578780f35b80821b830190608060231983360301126102d757610f79888760019460608351610f2281610f7f565b610f5e6084610f328d860161107f565b94858452610f426044820161107f565b8097850152610f536064820161107f565b80988501520161107f565b9182910152868060a01b0380808093169516931691166112a8565b01610eee565b608081019081106001600160401b03821117610f9a57604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b03821117610f9a57604052565b60a081019081106001600160401b03821117610f9a57604052565b60c081019081106001600160401b03821117610f9a57604052565b90601f801991011681019081106001600160401b03821117610f9a57604052565b60c435906001600160a01b038216820361103857565b600080fd5b600435906001600160a01b038216820361103857565b602435906001600160a01b038216820361103857565b604435906001600160a01b038216820361103857565b35906001600160a01b038216820361103857565b6003190190608082126110385760408051906110ae82610fb0565b808294126110385780518181018181106001600160401b03821117610f9a5782526004356001600160a01b0381168103611038578152602435602082015282526044356020830152606435910152565b9181601f84011215611038578235916001600160401b038311611038576020838186019501011161103857565b6001600160401b038111610f9a5760051b60200190565b359065ffffffffffff8216820361103857565b9181601f84011215611038578235916001600160401b038311611038576020808501948460061b01011161103857565b9190916060818403126110385760408051916111a083610fb0565b829481356001600160401b039081811161103857830182601f820112156110385780356111cc8161112b565b926111d987519485611001565b818452602094858086019360061b85010193818511611038579086899897969594939201925b84841061121c575050505050855280820135908501520135910152565b909192939495969784830312611038578851908982019082821085831117611269578a928992845261124d8761107f565b81528287013583820152815201930191908897969594936111ff565b60246000634e487b7160e01b81526041600452fd5b80518210156112925760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b92919260018060a01b03604060008284168152600160205282828220961695868252602052818120338252602052209485549565ffffffffffff8760a01c1680421161135457508287169683880361130b575b50506113099550169261136c565b565b87848416116000146113305760405163f96fb07160e01b815260048101899052602490fd5b8383611309990316906bffffffffffffffffffffffff60a01b1617905538806112fb565b60249060405190636c0d979760e11b82526004820152fd5b9060006064926020958295604051946323b872dd60e01b86526004860152602485015260448401525af13d15601f3d11600160005114161716156113ac57565b60405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606490fd5b91908110156112925760061b0190565b356001600160a01b03811681036110385790565b9065ffffffffffff908160608401511660018060a01b03908185511694826020820151169280866040809401511695169560009187835260016020528383208984526020528383209916988983526020528282209184835460d01c036115065791856114fa94927fc6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec989796945087156000146114ff5742165b6001850160d01b6001600160d01b03191660a09190911b65ffffffffffff60a01b1617179055516001600160a01b03909316835265ffffffffffff938416602084015290921660408201529081906060820190565b0390a4565b50866114a5565b8351633ab3447f60e11b8152600490fd5b467f000000000000000000000000000000000000000000000000000000000000000003611562577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f9ac997416e8ff9d2ff6bebeb7149f65cdae5e32e2b90440b566bb3044041d36a6040820152466060820152306080820152608081526115cc81610fcb565b51902090565b6115da611517565b9060405190602082019261190160f01b845260228301526042820152604281526115cc81610f7f565b9192909360a43593604084015180421161167e57506020845101518086116116665750918591610a976116439461163e602088015186611791565b6115d2565b51516001600160a01b03908116926084359182168203611038576113099361136c565b60249060405190633728b83d60e01b82526004820152fd5b6024906040519063cd21db4f60e01b82526004820152fd5b95909395805151956040928383015180421161177a5750848803611766576116cd918691610a9760209b61163e8d88015186611791565b60005b8681106116e1575050505050505050565b6116ec81835161127e565b51886116f983878a6113e8565b0135908981015180831161174f575091818888886001968596611723575b505050505050016116d0565b6117449561173e9261046a928a8060a01b03905116956113e8565b9161136c565b803888888883611717565b602490865190633728b83d60e01b82526004820152fd5b83516001621398b960e31b03198152600490fd5b60249085519063cd21db4f60e01b82526004820152fd5b90600160ff82161b9160018060a01b0316600052600060205260406000209060081c60005260205260406000208181541880915516156117cd57565b604051633ab3447f60e11b8152600490fd5b906117e98261112b565b6117f66040519182611001565b8281528092611807601f199161112b565b0190602036910137565b60001981146118205760010190565b634e487b7160e01b600052601160045260246000fd5b805160208092019160005b82811061184f575050505090565b835185529381019392810192600101611841565b9081519160005b83811061187b575050016000815290565b806020809284010151818501520161186a565b60405160208101917f65626cad6cb96493bf6f5ebea28756c966f023ab9e8a83a7101849d5573b3678835260018060a01b038082511660408401526020820151166060830152606065ffffffffffff9182604082015116608085015201511660a082015260a0815260c081018181106001600160401b03821117610f9a5760405251902090565b6040516020808201927f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a1845260018060a01b03815116604084015201516060820152606081526115cc81610f7f565b9190826040910312611038576020823592013590565b6000843b611a73575060418203611a235761199782820182611964565b939092604010156112925760209360009360ff6040608095013560f81c5b60405194855216868401526040830152606082015282805260015afa15611a17576000516001600160a01b03908116918215611a055716036119f357565b604051632057875960e21b8152600490fd5b604051638baa579f60e01b8152600490fd5b6040513d6000823e3d90fd5b60408203611a6157611a3791810190611964565b6001600160ff1b0381169260ff91821c601b019182116118205760209360009360ff6080946119b5565b604051634be6321b60e01b8152600490fd5b918093946020926064604051809781958294630b135d3f60e11b9b8c8552600485015260406024850152816044850152848401378181018301889052601f01601f191681010301916001600160a01b03165afa918215611b3f578192611af9575b50506001600160e01b03191603611ae757565b604051632c19a72f60e21b8152600490fd5b9091506020813d8211611b37575b81611b1460209383611001565b810103126102e75751906001600160e01b03198216820361085e57503880611ad4565b3d9150611b07565b50604051903d90823e3d90fdfea2646970667358221220bab77466e7caa876cc057c338dfa2c5885c39ac06723607d87d6a6d6ad764f4464736f6c63430008110033";

        address deployedAddress;
        assembly {
            deployedAddress :=
                create(
                    0, // value
                    add(bytecode, 0x20), // bytecode start
                    mload(bytecode) // bytecode length
                )
        }

        require(deployedAddress != address(0), "Deployer failed");
        return deployedAddress;
    }

    /// @dev Write a deployment address to the deployments.json file
    /// @param vm The VM to run the commands with
    /// @param contractName The name of the contract being deployed
    /// @param contractAddress The address of the deployed contract
    function writeDeployment(Vm vm, string memory contractName, address contractAddress) internal {
        JsonUtils.writeJsonEntry(vm, DEPLOYMENTS_PATH, contractName, vm.toString(contractAddress));
    }
}
