//! Generate verification keys for all Renegade circuits, and write them into a solidity file as ABI-encoded constant bytes
#![allow(incomplete_features)]
#![feature(generic_const_exprs)]
mod vkeys;

use alloy_sol_types::SolValue;
use anyhow::{anyhow, Result};
use clap::Parser;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;
use vkeys::Circuit;

const CONTRACT_NAME: &str = "VerificationKeys";

/// Command line arguments for the vkeys-codegen binary
#[derive(Parser, Debug)]
#[clap(author, version, about)]
struct Args {
    /// Path to output the generated Solidity file
    #[clap(short, long, default_value = "VerificationKeys.sol")]
    output: PathBuf,
}

/// Generate the Solidity contract with verification keys
fn generate_solidity_contract() -> Result<String> {
    // Contract header
    let mut contract = String::new();
    contract.push_str("// SPDX-License-Identifier: MIT\n");
    contract.push_str("pragma solidity ^0.8.0;\n\n");
    contract.push_str("// ⚠ ️WARNING: This file is auto-generated by `codegen/vkeys-codegen`. Do not edit directly.\n");
    contract.push_str(&format!("library {} {{\n", CONTRACT_NAME));

    // Push all verification keys to the contract string
    let circuits = Circuit::all();
    for circuit in circuits.iter() {
        let name = circuit.name();
        println!("Generating vkey for {}", name);
        let const_name = format!("{}_VKEY", name);
        let vkey = circuit.vkey();
        let abi_bytes = vkey.abi_encode();
        add_constant(&mut contract, &const_name, &abi_bytes);
    }

    // Close contract
    contract.push_str("}\n");
    Ok(contract)
}

/// Add a constant to the contract in the form `bytes constant public {name} = {value};`
fn add_constant(contract: &mut String, name: &str, value: &[u8]) {
    let hex_value = hex::encode(value);
    contract.push_str(&format!(
        "\tbytes constant public {name} = hex\"{hex_value}\";\n",
    ));
}

fn main() -> Result<()> {
    // Parse command line arguments
    let args = Args::parse();
    println!("Generating verification keys for all Renegade circuits");

    // Generate Solidity contract with all verification keys
    let contract = generate_solidity_contract()?;

    // Write to file
    let mut file =
        File::create(&args.output).map_err(|e| anyhow!("Failed to create output file: {}", e))?;
    file.write_all(contract.as_bytes())
        .map_err(|e| anyhow!("Failed to write to output file: {}", e))?;

    println!(
        "Successfully generated verification keys and wrote them to {}",
        args.output.display()
    );
    Ok(())
}
